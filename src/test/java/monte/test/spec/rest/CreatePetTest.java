package monte.test.spec.rest;

import io.restassured.response.Response;
import monte.test.core.constants.ErrorMessages;
import monte.test.core.model.api.ErrorResponse;
import monte.test.core.model.api.PetRequest;
import monte.test.core.model.api.PetResponse;
import monte.test.core.model.api.PetType;
import monte.test.core.utils.PetDataGenerator;
import monte.test.spec.rest.base.AbstractTest;
import org.testng.annotations.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class CreatePetTest extends AbstractTest {

    @Test
    public void testSuccessCreatePet() {
        // Prepare request data
        PetRequest request = PetDataGenerator.randomPet();

        // Create pet via API client
        Response response = petApiClient.createPet(request);

        // Asserting
        assertThat(response.statusCode())
                .isEqualTo(201);

        PetResponse petResponse = response
                .body()
                .as(PetResponse.class);

        assertThat(petResponse)
                .isNotNull()
                .usingRecursiveComparison()
                .ignoringFields("id", "petId") // fields generated by server
                .isEqualTo(request);
        assertThat(petResponse.petId()).isGreaterThan(0);
    }

    @Test
    public void testFailToCreatePetWithEmptyName() {
        // Prepare request data
        PetRequest request = PetDataGenerator
                .randomPet()
                .withName("");

        // Send request with empty pet name
        Response response = petApiClient.createPet(request);

        // Asserting
        assertThat(response.statusCode())
                .isEqualTo(400);

        ErrorResponse errorResponse = response.body().as(ErrorResponse.class);
        assertThat(errorResponse.message())
                .isEqualTo(ErrorMessages.EMPTY_FIELDS);
    }

    @Test
    public void testFailToCreatePetWithIncorrectPetType() {
        // Prepare request data
        PetRequest request = PetDataGenerator
                .randomPet()
                .withType(PetType.NOT_EXISTING_PET_TYPE);

        // Send request with not existing pet type
        Response response = petApiClient.createPet(request);

        // Asserting
        assertThat(response.statusCode())
                .isEqualTo(422);

        ErrorResponse errorResponse = response.body().as(ErrorResponse.class);
        assertThat(errorResponse.message())
                .isEqualToIgnoringCase(String.format(ErrorMessages.INVALID_PET_TYPE, request.type()));
    }
}
